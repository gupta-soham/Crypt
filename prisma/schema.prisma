generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum VoteType {
  UP
  DOWN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String     @id @default(cuid())
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  username         String?    @unique
  image            String?
  createdSubgroups Subgroup[] @relation("CreatedBy")

  accounts      Account[]
  sessions      Session[]
  Post          Post[]
  Comment       Comment[]
  CommentVote   CommentVote[]
  Subscriptions Subscription[]
  Vote          Vote[]
}

model Subgroup {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]

  Creator     User?          @relation("CreatedBy", fields: [creatorId], references: [id])
  creatorId   String?
  subscribers Subscription[]

  @@index([name])
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  subgroup   Subgroup  @relation(fields: [subgroupId], references: [id])
  subgroupId String
  comments   Comment[]
  votes      Vote[]
}

model Subscription {
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  subgroup   Subgroup @relation(fields: [subgroupId], references: [id])
  subgroupId String

  @@id([userId, subgroupId])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String

  replyToId String?
  replyTo   Comment?  @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("ReplyTo")

  votes     CommentVote[]
  commentId String?
}

model Vote {
  user   User     @relation(fields: [userId], references: [id])
  userId String
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  type   VoteType

  @@id([userId, postId])
}

model CommentVote {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  type      VoteType

  @@id([userId, commentId])
}
